using System;
using System.Diagnostics;
using System.IO;
using Libptx.Common;
using Type=Libptx.Common.Types.Type;
using XenoGears.Assertions;
using XenoGears.Strings;

namespace Libptx.Expressions.Slots
{
    [DebuggerNonUserCode]
    public partial class Reg : Atom, Slot, Expression
    {
        public String Name { get; set; }
        public Type Type { get; set; }

        private int _alignment;
        public int Alignment
        {
            get
            {
                if (_alignment == 0)
                {
                    if (this.is_pred()) return 1;
                    if (this.is_opaque()) return 16;
                    return this.SizeOfElement();
                }
                else
                {
                    return _alignment;
                }
            }

            set { _alignment = value; }
        }

        protected override void CustomValidate(Module ctx)
        {
            // if name is null, it'll be autogenerated by Entry::Validate
            if (Name != null) Name.ValidateName();
            // uniqueness of names is validated by Entry

            (Type != null).AssertTrue();
            Type.Validate(ctx);
            this.is_opaque().AssertFalse();
            this.is_ptr().AssertFalse();
            this.is_bmk().AssertFalse();

            if (_alignment != 0) Alignment.ValidateAlignment(Type);
        }

        protected override void RenderAsPtx(TextWriter writer)
        {
            writer.Write(".reg ");
            if (_alignment != 0) writer.Write(".align " + Alignment + " ");

            var t = Type.RenderAsPtx();
            var el = t.IndexOf("[") == -1 ? t : t.Slice(0, t.IndexOf("["));
            var indices = t.IndexOf("[") == -1 ? null : t.Slice(t.IndexOf("["));
            writer.Write(".{0} {1}{2}", el, Name, indices);
        }
    }
}